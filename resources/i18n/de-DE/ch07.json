{
  "Add a local branch to your forked repository to work on your changes.": "Füge eine lokale Verzweigung zu deinem abgespalteten Repository hinzu, um dort etwas zu verändern.",
  "Branches": "Branches",
  "Git repositories use branches to isolate changes when needed. It is common practice when working together on a project to create a {/str/}branch{/str_e/} to keep your working changes in. This allows different changes to be developed on separate branches without interfering with each other. Only when the work on your branch is finished, you merge your changes back into the main branch. The main branch thus always contains a stable version of the project.": "Git Repositorys benutzen Branches (dt. Zweige) um Veränderungen zu isolieren, wenn dies nötig ist. Es ist übliche Praxis in gemeinsamen Projekten, einen {/str/}Branch{/str_e/} (Zweig) zu erstellen, um dort die Änderungen zu speichern. Auf diese Weise können verschiedene Änderungen auf separaten Zweigen entwickelt werden, ohne einander zu stören. Nur wenn die Arbeit im Nebenzweig dann abgeschlossen ist, wird der Nebenzweig wieder in den Hauptzweig eingefügt und seine Änderungen mit dem Hauptzweig verschmolzen (engl. merge). Somit enthält der Hauptzweig immer eine stabile Version des Projektes.",
  "The diagram illustrates how you can branch off of your 'main' branch (the straight line in the middle), do your work on a branch (dots illustrate commits) and then merge those changes back into 'main'. You can even branch off of a branch if you need to, the main-branch doesn't have to be the base.": "Das Diagramm illustriert das Abzweigen aus dem Hauptzweig (die gerade Linie in der Mitte), das Arbeiten auf dem Nebenzweig (Punkte illustrieren Commits) und das Einfügen der Änderungen zurück in den Hauptzweig. Es ist sogar möglich von einem Nebenzweig abzuzweigen, der Hauptzweig muss nicht unbedingt die Basis bilden.",
  "The Git(Hub)-Workflow": "Der Git(Hub) Arbeitsablauf",
  "To make things clearer, let us write down the typical workflow for integrating a feature into a project:": "Um das Ganze etwas klarer darzustellen, lass uns einmal den typischen Arbeitsablauf aufschreiben, um eine Funktion in ein Projekt zu integrieren:",
  "{/str/}Update the main branch:{/str_e/} Before starting with a change, make sure you will be working on the most recent version of the project.": "{/str/}Aktualisiere den Hauptast:{/str_e/} Bevor du anfängst etwas zu ändern, stelle sicher, dass du an der aktuellen Version des Projektes arbeitest.",
  "{/str/}Create a branch:{/str_e/} Create your own branch where you can safely work on your changes.": "{/str/}Erzeuge einen Ast:{/str_e/} Erzeuge deinen eigenen Nebenast, auf dem du gefahrlos an deinen Änderungen arbeiten kannst.",
  "{/str/}Make your changes:{/str_e/} Go ahead! Implement your feature, experiment a bit and test it. Create commits at any time you want to store a part of your change on the branch.": "{/str/}Implementiere deine Änderungen:{/str_e/} Auf gehts! Implementiere dein Feature, experimentiere ein bisschen und teste die Änderungen. Erzeuge Commits wann immer du einen Teil deiner Änderungen im Nebenast speichern willst.",
  "{/str/}Create a pull request:{/str_e/} Once your change is ready you can show your work to other project members. Let them discuss and review your code. If they have ideas on how to improve your feature, you can still implement these ideas on your branch. We will soon learn more about pull requests.": "{/str/}Erstelle einen Pull-Request:{/str_e/} Sobald deine Änderungen bereit sind, kannst du deine Arbeit den anderen Projektmitgliedern zeigen. Lass sie die Änderungen diskutieren und deinen Code überprüfen. Wenn sie Idee haben, wie du dein Feature noch verbessern kannst, kannst du diese Ideen noch immer auf deinem Nebenast implementieren. Wir werden bald mehr über Pull-Requests erfahren.",
  "{/str/}Merge it:{/str_e/} Once everybody is happy to add the new feature to the project, you can merge your branch into the main branch. Now your feature is a built-in part of the project. We'll see that soon, too!": "{/str/}Zusammenführen:{/str_e/} Wenn alle mit deinem neuen Feature glücklich sind, kannst du deinen Nebenast zurück in den Hauptast integrieren. Jetzt ist dein Feature ein integrierter Teil des Projekts. Auch das werden wir bald sehen!",
  "GitHub Pages": "GitHub Webseiten",
  "GitHub will automatically serve and host static website files in branches named 'gh-pages'. This free service is called {/lnk_pages/}GitHub Pages{/lnk_e/}. Since the project you forked creates a website, its main branch is named 'gh-pages' instead of 'main'. All repositories that have a 'gh-pages' branch with website files can be found, live online, using this pattern for the URL:": "GitHub hostet automatisch statische Webseiten-Dateien, die in Branches mit dem Namen 'gh-pages' abgelegt sind. Dieser kostenlose Service ist als {/lnk_pages/}GitHub Pages{/lnk_e/} (dt. GitHub Seiten) bekannt. Da das in der letzen Aufgabe abgespaltete Projekt 'patchwork' eine Webseite erstellt, ist der Hauptzweig in diesem Projekt als 'gh-pages' benannt, anstatt als 'main'. Alle Repositorys, die einen 'gh-pages'-Branch mit Webseiten-Dateien besitzen, sind online unter dem folgenden URL-Muster zu finden:",
  "'Main' or 'Master'?": "'Main' oder 'Master'?",
  "You've heard about the git 'master' branch, but now we are just talking about 'main'? Well, here's a quick note on the history:{/br/} Since the early days of Git, the default branch created by {/cde/}git init{/cde_e/} was named 'master'. As a result, many projects used this branch as their main branch to contain the (stable) state of the project. In the year 2020 with the new rise of the Black Lives Matter movement in the US, the tech community became more aware of the historical significance of the master/slave designation and the harm these namings could still do to some people. Some projects started renaming their 'master' branches to other names, more and more companies joined in, and also GitHub changed its initial branch name to 'main'. The Git project itself up to day has not yet made the breaking change of renaming the default branch name, but has introduced an option to set it as a preference in the Git config. You set this config value to 'main' in the first challenge. You could set the default branch name to whatever you want and you'll probably still read about old 'master' branches. But 'main' nowadays is a very common term to use as name for the main branch of a project.": "Du hast möglicherweise schon vom 'master' branch gehört, aber wir sprechen nur vom 'main' branch? Also, hier eine kurze Info zur Geschichte:{/br/} Seit den frühen Tagen von Git, wurde der Standard-Branch, der von {/cde/}git init{/cde_e/} erzeugt wird, als 'master' Branch (Ast) benannt. Daher verwendeten viele Projekte diesen Ast als ihren Hauptast, der den stabilen Zustand des Projektes enthalten sollte. Im Jahr 2020, mit dem Aufkommen der Black Lives Matter Bewegung in den USA, wurde auch der Technik Gemeinschaft die historische Bedeutung der Begrifflichkeiten Master & Slave bewusst, sowie der Schmerz, den solche Begrifflichkeiten noch heute manchen Menschen bereiten könnten. Einige Projekte begannen ihre 'master' Äste umzubenennen, immer mehr Firmen stiegen mit ein und auch GitHub änderte den initialen Branch-Namen für neue Projekte zu 'main'. Das Git Projekt selbst hat bis heute den großen Schritt noch nicht getan, den Standard-Branchnamen zu ändern, hat aber eine Option eingeführt, den Standardnamen als Präferenz in der Git-Config zu speichern. Du hast diese Präferenz in der ersten Challenge auf 'main' eingestellt. Du könntest diese Einstellung auf einen beliebigen Wert setzen und vermutlich wirst du noch immer von 'master' Branches lesen. Aber 'main' ist heutzutage ein sehr häufig verwendeter Begriff als Name für den Hauptast eines Projektes.",
  "Create a branch": "Erzeuge einen Branch",
  "While still inside of your local 'patchwork' repository, type {/cde/}git status{/cde_e/} to see what branch you're currently on. Git should reply that you're on the 'gh-pages' branch.": "Gib im Terminal - noch immer in deinem lokalen 'patchwork'-Repository - den Befehl {/cde/}git status{/cde_e/} ein, um zu sehen in welchem Branch Git aktuell arbeitet. Git sollte dir den Branch 'gh-pages' zurückgeben.",
  "Now create a new branch and name it {/add_branch/}, where 'username' is your username. For instance, {/add_jlord/}. {/str/}Branches are case-sensitive so name your branch exactly the way your GitHub name appears{/str_e/}.": "Erzeuge nun einen neuen Branch mit der Bezeichnung {/add_branch/}, wobei 'username' deinen eigenen GitHub-Nutzernamen darstellen soll (Bsp. {/add_jlord/}). {/str/}Achtung: Branches sind 'case-sensitive', das heißt Groß- und Kleinschreibung müssen unterschieden werden! Benenne deinen neuen Branch im Repository exakt nach deinem GitHub Nutzernamen!{/str_e/}",
  "Now you have a new branch that is identical to 'gh-pages' but has a new name.": "Jetzt existert in deinem Repository ein neuer Branch, der dem Branch 'gh-pages' entspricht, aber einen neuen Namen besitzt.",
  "To go into that branch and work on it you {/str/}checkout{/str_e/} a branch. Go on your new branch:": "Um in diesem neuen Branch zu arbeiten, musst du den Branch auswählen. In Git wird hierfür der Befehl {/str/}checkout{/str_e/} (dt. ausprobieren) verwendet. Wähle nun deinen neuen Branch aus:",
  "Step: Create a new file": "Nächster Schritt: Erstelle eine neue Datei",
  "Back in your text editor:": "Zurück im Text-Editor:",
  "Create a new file named {/filename_add/} in the 'contributors' folder of the repository. Once more, the term 'username' should be replaced by your own username. For instance, {/filename_jlord/}.": "Erzeuge eine Datei mit dem Namen {/filename_add/}, im 'contributors' Ordner des Repository. Ersetze wiederum den Begriff 'username' durch deinen GitHub-Nutzernamen. (Im bereits genannten Bsp.: {/filename_jlord/})",
  "Then, just write your GitHub username in it, that's it and that's all. For instance, I'd type 'jlord'.": "Als Inhalt der Textdatei schreibe einzig und alleine deinen GitHub-Nutzernamen in die Datei. (Im Bsp. 'jlord').",
  "Make sure the file is just in that first level folder of the repository: {/br/} {/str/}{/filepath/}{/str_e/}": "Stelle sicher, dass die Datei im nur ersten Ordner des Repository abgespeichert ist: {/br/}{/str/}{/filepath/}{/str_e/}",
  "Next, check in your changes (see below).": "Diese Änderungen kannst du nun im Repository sichern (siehe unten).",
  "Check-in": "Änderungen im Repository sichern",
  "You already know the steps for checking in your changes: ": "Die Schritte zum Speichern der Änderungen sind dir bereits bekannt:",
  "Now push your update to {/str/}your fork{/str_e/}, 'origin', on GitHub:": "Schiebe deine Aktualisierung in {/str/}dein abgezweigtes Repository (dein Fork){/str_e/} 'origin' bei GitHub:",
  "Permission denied...error: 403": "Permission denied...error: 403",
  "You are pushing changes to a repository you don't have write access to. In this case, you're likely pushing to the original 'jlord/patchwork'. Make sure that you're pushing to 'origin' and that it points to your fork's address on GitHub. To check and see what your remotes are and where they point run {/cde/}git remote -v{/cde_e/}. You should have 'upstream' pointing to 'jlord/patchwork' and 'origin' pointing to 'yourusername/patchwork'.": "'Permission denied' (dt. Zugriff verweigert) bezeichnet den Fehler, wenn du versuchst auf ein Repository zu schieben zu dem du keine Änderungs-Berechtigung besitzt. In unserem Fall versuchst du vermutlich auf das Original-Repository 'jlord/patchwork' zu schieben. Stelle sicher, dass du zum Remote 'origin' schiebst, und dass dieser Remote auf die Adresse deines abgespalteten Repository (deines Forks) bei GitHub zeigt. Um deine Remotes anzuschauen und zu überprüfen wohin diese zeigen, nutze den Befehl {/cde/}git remote -v{/cde_e/}. Du solltest hier den Remote 'upstream' sehen, der auf 'jlord/patchwork' zeigt, sowie den Remote 'origin', der auf '<DeinNutzerName>/patchwork' zeigt.",
  "To fix a remote that is pointing to the wrong place you can re-set its url: {/cde/}git remote set-url origin {/lt/}URLTOYOURFORK{/gt/}{/cde_e/}.": "Um den Fehler eines fehlgeleiteten Remotes zu beheben und den Zeiger des Remotes neu zu setzen nutze den folgenden Befehl: {/cde/}git remote set-url origin {/lt/}URL{/gt/}{/cde_e/}.",
  "File NOT in contributors folder": "File NOT in contributors folder",
  "The file you create should be placed inside the existing 'contributors' folder in the Patchwork repository. If you put it somewhere else, simply use Finder or Windows Explorer to move your file into the folder. You can check {/cde/}git status{/cde_e/} again and you'll find it sees your changes. Stage and then commit all of these changes (additions and deletions) with the commands below.": "'File NOT in contributors folder' (dt. Datei nicht im Ordner 'contributors') - Die erstellte Datei sollte im 'contributors'-Verzeichnis in deinem Patchwork-Repository gespeichert sein. Solltest du sie an einem anderen Ort abgespeichert haben, benutze am besten die Suche und schiebe die Datei in das 'contributors'-Verzeichnis. Teste anschließend erneut den {/cde/}git status{/cde_e/} füge die Datei den Änderungen hinzu und übergib die Änderungen an die Historie:",
  "Branch name expected: _____": "Branch name expected: _____",
  "The branch name should match your user name exactly. To change your branch name:": "'Branch name expected: _____' (dt. Branch-Name erwartet:) Der Branch-Name sollte exakt deinem Nutzernamen entsprechen. Um den Branch-Namen zu ändern, nutze den Befehl:",
  "When you've made your updates, verify again!": "Wenn du dies aktualisiert hast, kannst du das Ergebnis erneut prüfen!",
  "You can create and switch to a branch in one line": "Du kannst einen Branch mit einem einzigen Kommando erzeugen und auswählen",
  "Create a new branch": "Erzeugen einen neuen Branch",
  "Move onto a branch": "Wähle einen Branch aus",
  "List the branches": "Liste die verfügbaren Branches auf",
  "Rename a branch you're currently on": "Benenne den aktuell ausgewählten Branch um",
  "Verify what branch you're working on": "Überprüfe auf welchem Branch du aktuell arbeitest"
}
