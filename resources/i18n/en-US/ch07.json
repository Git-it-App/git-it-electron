{
  "Add a branch, locally, to your forked repository to work on your changes.": "Add a branch, locally, to your forked repository to work on your changes.",
  "Branches": "Branches",
  "Git repositories use branches to isolate work when needed. It is common practice when working together on a project to create a {/str/}branch{/str_e/} to keep your working changes in. This allows different changes to be developed on separate branches without interfering with each other. When the work on your branch is finished, you merge your changes back into the main branch (commonly named 'master'). This main branch thus always contains a stable version of the project.": "Git repositories use branches to isolate work when needed. It is common practice when working together on a project to create a {/str/}branch{/str_e/} to keep your working changes in. This allows different changes to be developed on separate branches without interfering with each other. When the work on your branch is finished, you merge your changes back into the main branch (commonly named 'master'). This main branch thus always contains a stable version of the project.",
  "The diagram illustrates how you can branch off of your 'master' branch (the straight black line in the middle), do your work on a branch (dots illustrate commits) and then merge those changes back into 'master'. You can even branch off of a branch if you need to, the 'master' branch doesn't have to be the base.": "The diagram illustrates how you can branch off of your 'master' branch (the straight black line in the middle), do your work on a branch (dots illustrate commits) and then merge those changes back into 'master'. You can even branch off of a branch if you need to, the 'master' branch doesn't have to be the base.",
  "For a great visualization on how branches work in a project, see this GitHub Guide: {/lnk_guide/}guides.github.com/overviews/flow{/lnk_e/}": "For a great visualization on how branches work in a project, see this GitHub Guide: {/lnk_guide/}guides.github.com/overviews/flow{/lnk_e/}",
  "GitHub Pages": "GitHub Pages",
  "GitHub will automatically serve and host static website files in branches named 'gh-pages'. This free service is called {/lnk_pages/}GitHub Pages{/lnk_e/}. Since the project you forked creates a website, its main branch is named 'gh-pages' instead of 'master'. All repositories that have a 'gh-pages' branch with website files can be found, live online, using this pattern for the URL:": "GitHub will automatically serve and host static website files in branches named 'gh-pages'. This free service is called {/lnk_pages/}GitHub Pages{/lnk_e/}. Since the project you forked creates a website, its main branch is named 'gh-pages' instead of 'master'. All repositories that have a 'gh-pages' branch with website files can be found, live online, using this pattern for the URL:",
  "Create a branch": "Create a branch",
  "While still inside of your local 'patchwork' repository, type {/cde/}git status{/cde_e/} to see what branch you're currently on. Git should reply that you're on the 'gh-pages' branch.": "While still inside of your local 'patchwork' repository, type {/cde/}git status{/cde_e/} to see what branch you're currently on. Git should reply that you're on the 'gh-pages' branch.",
  "Now create a new branch and name it {/add_branch/}, where 'username' is your username. For instance, {/add_jlord/}. {/str/}Branches are case-sensitive so name your branch exactly the way your GitHub name appears{/str_e/}.": "Now create a new branch and name it {/add_branch/}, where 'username' is your username. For instance, {/add_jlord/}. {/str/}Branches are case-sensitive so name your branch exactly the way your GitHub name appears{/str_e/}.",
  "Now you have a new branch that is identical to 'gh-pages' but has a new name.": "Now you have a new branch that is identical to 'gh-pages' but has a new name.",
  "To go into that branch and work on it you {/str/}checkout{/str_e/} a branch. Go on your new branch:": "To go into that branch and work on it you {/str/}checkout{/str_e/} a branch. Go on your new branch:",
  "Step: Create a new file": "Step: Create a new file",
  "Back in your text editor:": "Back in your text editor:",
  "Create a new file named {/filename_add/}, where 'username' is your username. For instance, {/filename_jlord/}.": "Create a new file named {/filename_add/}, where 'username' is your username. For instance, {/filename_jlord/}.",
  "Then, just write your GitHub username in it, that's it and that's all. For instance, I'd type 'jlord'.": "Then, just write your GitHub username in it, that's it and that's all. For instance, I'd type 'jlord'.",
  "Save this file in the 'contributors' folder in Patchwork: {/str/}{/filepath/}{/str_e/}": "Save this file in the 'contributors' folder in Patchwork: {/str/}{/filepath/}{/str_e/}",
  "Next, check in your changes (see below).": "Next, check in your changes (see below).",
  "Check-in": "Check-in",
  "You already know the steps for checking in your changes: ": "You already know the steps for checking in your changes: ",
  "Now push your update to {/str/}your fork{/str_e/}, 'origin', on GitHub:": "Now push your update to {/str/}your fork{/str_e/}, 'origin', on GitHub:",
  "Permission denied...error: 403": "Permission denied...error: 403",
  "You are pushing changes to a repository you don't have write access to. In this case, you're likely pushing to the original 'jlord/patchwork'. Make sure that you're pushing to 'origin' and that it points to your fork's address on GitHub. To check and see what your remotes are and where they point run {/cde/}git remote -v{/cde_e/}. You should have 'upstream' pointing to 'jlord/patchwork' and 'origin' pointing to 'yourusername/patchwork'.": "You are pushing changes to a repository you don't have write access to. In this case, you're likely pushing to the original 'jlord/patchwork'. Make sure that you're pushing to 'origin' and that it points to your fork's address on GitHub. To check and see what your remotes are and where they point run {/cde/}git remote -v{/cde_e/}. You should have 'upstream' pointing to 'jlord/patchwork' and 'origin' pointing to 'yourusername/patchwork'.",
  "To fix a remote that is pointing to the wrong place you can re-set its url: {/cde/}git remote set-url origin {/lt/}URLTOYOURFORK{/gt/}{/cde_e/}.": "To fix a remote that is pointing to the wrong place you can re-set its url: {/cde/}git remote set-url origin {/lt/}URLTOYOURFORK{/gt/}{/cde_e/}.",
  "Authentication failed...error: 401": "Authentication failed...error: 401",
  "Your identity could not be verified. You may have 2FA (Two Factor Authentication) turned on in which case you must use a personal access token as your password. You can generate one by {/lnk_instr/}following these instructions{/lnk_e/}. You'll need to keep this and use it in place of your password when prompted. You can also {/lnk_save/}save this access token{/lnk_e/} on your computer so that you don't have to re-enter it.": "Your identity could not be verified. You may have 2FA (Two Factor Authentication) turned on in which case you must use a personal access token as your password. You can generate one by {/lnk_instr/}following these instructions{/lnk_e/}. You'll need to keep this and use it in place of your password when prompted. You can also {/lnk_save/}save this access token{/lnk_e/} on your computer so that you don't have to re-enter it.",
  "File NOT in contributors folder": "File NOT in contributors folder",
  "The file you create should be placed inside the existing 'contributors' folder in the Patchwork repository. If you put it somewhere else, simply use Finder or Windows Explorer to move your file into the folder. You can check {/cde/}git status{/cde_e/} again and you'll find it sees your changes. Stage and then commit all of these changes (additions and deletions) with the commands below.": "The file you create should be placed inside the existing 'contributors' folder in the Patchwork repository. If you put it somewhere else, simply use Finder or Windows Explorer to move your file into the folder. You can check {/cde/}git status{/cde_e/} again and you'll find it sees your changes. Stage and then commit all of these changes (additions and deletions) with the commands below.",
  "Branch name expected: _____": "Branch name expected: _____",
  "The branch name should match your user name exactly. To change your branch name:": "The branch name should match your user name exactly. To change your branch name:",
  "When you've made your updates, verify again!": "When you've made your updates, verify again!",
  "You can create and switch to a branch in one line": "You can create and switch to a branch in one line",
  "Create a new branch": "Create a new branch",
  "Move onto a branch": "Move onto a branch",
  "List the branches": "List the branches",
  "Rename a branch you're currently on": "Rename a branch you're currently on",
  "Verify what branch you're working on": "Verify what branch you're working on"
}
